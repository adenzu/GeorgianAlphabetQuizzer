import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QPushButton
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QComboBox
import numpy as np

georgian_letters = [
    "ა",
    "ბ",
    "გ",
    "დ",
    "ე",
    "ვ",
    "ზ",
    "თ",
    "ი",
    "კ",
    "ლ",
    "მ",
    "ნ",
    "ო",
    "პ",
    "ჟ",
    "რ",
    "ს",
    "ტ",
    "უ",
    "ფ",
    "ქ",
    "ღ",
    "ყ",
    "შ",
    "ჩ",
    "ც",
    "ძ",
    "წ",
    "ჭ",
    "ხ",
    "ჯ",
    "ჰ"
]

turkish_pronunciations = [
    "a",
    "b",
    "g",
    "d",
    "e",
    "v",
    "z",
    "t",
    "i",
    "k'",
    "l",
    "m",
    "n",
    "o",
    "p'",
    "j",
    "r",
    "s",
    "t'",
    "u",
    "p",
    "k",
    "ğ",
    "q'",
    "ş",
    "ç",
    "ts",
    "dz",
    "ts'",
    "ç'",
    "h'",
    "c",
    "h"
]

# Generated by ChatGPT, not personally verified
english_pronunciations = [
    "a",
    "b",
    "g",
    "d",
    "e",
    "v",
    "z",
    "t",
    "i",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "zh",
    "r",
    "s",
    "t",
    "u",
    "p",
    "k",
    "gh",
    "q",
    "sh",
    "ch",
    "ts",
    "dz",
    "ts",
    "ch",
    "kh",
    "j",
    "h"
]

georgian_letters_to_turkish_pronunciations = {
    georgian_letters[i]: turkish_pronunciations[i] for i in range(len(georgian_letters))}

georgian_letters_to_english_pronunciations = {
    georgian_letters[i]: english_pronunciations[i] for i in range(len(georgian_letters))}


def getGeorgianWordPronunciation(word: str, language: str) -> str:
    """Gets the pronunciation of a Georgian word.

    Args:
        word (str): The Georgian word.
        language (str): The language to generate the pronunciation in.

    Returns:
        str: The pronunciation of the Georgian word.
    """

    language = language.lower()
    pronunciation = "error"
    if language == "turkish" or language == "tr":
        pronunciation = "".join(
            georgian_letters_to_turkish_pronunciations[letter] for letter in word)
    elif language == "english" or language == "en":
        pronunciation = "".join(
            georgian_letters_to_english_pronunciations[letter] for letter in word)

    return pronunciation


def generateRandomGeorgianWordAndPronunciation(length: int, language: str) -> tuple[str, str]:
    """Generates a random Georgian word and its pronunciation.

    Args:
        length (int): The length of the word to generate.
        language (str): The language to generate the pronunciation in.

    Returns:
        tuple[str, str]: A tuple containing the word and its pronunciation.
    """

    letter_indices = np.random.randint(0, len(georgian_letters), length)

    georgian_word = "".join(georgian_letters[i] for i in letter_indices)

    language = language.lower()
    pronunciation = "error"
    if language == "turkish" or language == "tr":
        pronunciation = "".join(
            turkish_pronunciations[i] for i in letter_indices)
    elif language == "english" or language == "en":
        pronunciation = "".join(
            english_pronunciations[i] for i in letter_indices)

    return (georgian_word, pronunciation)


class MyWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.language = "turkish"
        self.revealed_text_is_georgian = True
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Georgian Alphabet Quiz App")
        self.showMaximized()

        # Create the main layout
        layout = QVBoxLayout()

        self.label_font_size = 100

        # Create the initial text label
        self.label1 = QLabel()
        self.label1.setAlignment(Qt.AlignCenter)
        self.label1.setStyleSheet(
            f"font-size: {self.label_font_size}px; font-weight: bold;")
        layout.addWidget(self.label1)

        # Create the middle text label
        self.label2 = QLabel()
        self.label2.setAlignment(Qt.AlignCenter)
        self.label2.setStyleSheet(
            f"font-size: {self.label_font_size}px; font-weight: bold;")
        self.label2.setVisible(False)
        layout.addWidget(self.label2)

        # Create the reveal button
        self.button = QPushButton("Reveal")
        self.button.clicked.connect(self.onButtonClicked)
        layout.addWidget(self.button)

        # Create language selection dropdown
        self.language_dropdown = QComboBox()
        self.language_dropdown.addItem("Turkish")
        self.language_dropdown.addItem("English")
        self.language_dropdown.currentIndexChanged.connect(
            lambda: self.setLanguage(self.language_dropdown.currentText().lower()))
        layout.addWidget(self.language_dropdown)

        # Create font size buttons
        self.font_size_increase_button = QPushButton("Increase Font Size")
        self.font_size_increase_button.clicked.connect(
            lambda: self.setFontSize(self.label_font_size + 5))
        layout.addWidget(self.font_size_increase_button)

        self.font_size_decrease_button = QPushButton("Decrease Font Size")
        self.font_size_decrease_button.clicked.connect(
            lambda: self.setFontSize(self.label_font_size - 5))
        layout.addWidget(self.font_size_decrease_button)

        # Generate the initial text
        self.generateLabelTexts()

        self.setLayout(layout)
        self.show()

    def setFontSize(self, font_size: int):
        self.label_font_size = font_size
        self.label1.setStyleSheet(
            f"font-size: {self.label_font_size}px; font-weight: bold;")
        self.label2.setStyleSheet(
            f"font-size: {self.label_font_size}px; font-weight: bold;")

    def setLanguage(self, language: str):
        self.language = language
        if self.revealed_text_is_georgian:
            self.label2.setText(getGeorgianWordPronunciation(
                self.label1.text(), self.language))
        else:
            self.label1.setText(getGeorgianWordPronunciation(
                self.label2.text(), self.language))

    def generateLabelTexts(self):
        minimum_length = 3
        maximum_length = 10
        word_length = np.random.randint(minimum_length, maximum_length)
        georgian_word, pronunciation = generateRandomGeorgianWordAndPronunciation(
            word_length, self.language)

        # Randomly choose whether to show the Georgian word or the pronunciation
        if np.random.random() < 0.5:
            self.revealed_text_is_georgian = True
            self.label1.setText(georgian_word)
            self.label2.setText(pronunciation)
        else:
            self.revealed_text_is_georgian = False
            self.label1.setText(pronunciation)
            self.label2.setText(georgian_word)

    def onButtonClicked(self):
        if self.label2.isVisible():
            self.label2.setVisible(False)
            self.generateLabelTexts()
            self.button.setText("Reveal")
        else:
            self.label2.setVisible(True)
            self.button.setText("Next")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = MyWidget()
    sys.exit(app.exec())
